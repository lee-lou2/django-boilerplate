from rest_framework import status
from rest_framework.test import APITestCase

from apps.{{ app_name }}.models import {{ camel_case_app_name }}


class {{ camel_case_app_name }}APITest(APITestCase):
    def setUp(self):
        self.user1 = self.create_user("test_user1", "test_password1")
        self.user2 = self.create_user("test_user2", "test_password2")
        super().setUp()

    def tearDown(self):
        super().tearDown()

    def test_success_test_cast1(self):
        # anonymous user
        resp = self.client.post(
            "/api/v1/{{ app_name }}/",
            {
                "name": "test_name",
            },
            format="json",
        )
        self.assertEqual(resp.status_code, status.HTTP_200_OK)
        self.assertEqual(resp.json()["name"], "test_name")

    def test_success_test_cast2(self):
        # authenticated user
        self.client.force_login(self.user1)
        resp = self.client.post(
            "/api/v1/{{ app_name }}/",
            {
                "name": "test_name",
            },
            format="json",
        )
        self.assertEqual(resp.status_code, status.HTTP_200_OK)
        self.assertEqual(resp.json()["name"], "test_name")

    def test_success_test_cast3(self):
        # frozen time
        with freeze_time("2025-01-01"):
            self.client.force_login(self.user1)
            resp = self.client.post(
                "/api/v1/{{ app_name }}/",
                {
                    "name": "test_name",
                },
                format="json",
            )
        self.assertEqual(resp.status_code, status.HTTP_200_OK)
        self.assertEqual(resp.json()["name"], "test_name")

    def test_fail_test_cast1(self):
        # anonymous user
        resp = self.client.post(
            "/api/v1/{{ app_name }}/",
            {
                "name": "test_name",
            },
            format="json",
        )
        self.assertEqual(resp.status_code, status.HTTP_401_UNAUTHORIZED)

    def test_fail_test_cast2(self):
        # authenticated user
        self.client.force_login(self.user2)
        resp = self.client.post(
            "/api/v1/{{ app_name }}/",
            {
                "name": "test_name",
            },
            format="json",
        )
        self.assertEqual(resp.status_code, status.HTTP_403_FORBIDDEN)

    def test_fail_test_cast3(self):
        # raise exception
        resp = self.client.post(
            "/api/v1/{{ app_name }}/",
            {
                "name": "test_name",
            },
            format="json",
        )
        self.assertEqual(resp.status_code, status.HTTP_500_INTERNAL_SERVER_ERROR)

    def test_fail_test_cast4(self):
        # exception handler
        with self.assertRaises(Exception):
            resp = self.client.post(
                "/api/v1/{{ app_name }}/",
                {
                    "name": "test_name",
                },
                format="json",
            )
            self.assertEqual(resp.status_code, status.HTTP_500_INTERNAL_SERVER_ERROR)
